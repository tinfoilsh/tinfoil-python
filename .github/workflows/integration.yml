name: Integration

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]   # pick one stable Python

    # Expose secrets as plain ENV vars so we can gate on them
    env:
      TINFOIL_ENCLAVE: ${{ secrets.TINFOIL_ENCLAVE }}
      TINFOIL_REPO:    ${{ secrets.TINFOIL_REPO }}
      TINFOIL_API_KEY: ${{ secrets.TINFOIL_API_KEY }}

    steps:
      # ─── Gate: skip entire job if secrets aren’t set (e.g. forks) ────────
      - name: Check integration secrets
        id: gate
        run: |
          if [ -z "$TINFOIL_ENCLAVE" ] || [ -z "$TINFOIL_REPO" ]; then
            echo "run=false" >> $GITHUB_OUTPUT
          else
            echo "run=true"  >> $GITHUB_OUTPUT
          fi

      # ─── Core steps (only when run=true) ────────────────────────────────
      - uses: actions/checkout@v4
        if: steps.gate.outputs.run == 'true'

      # 1️⃣ Set up Python & install Pybindgen early for gopy’s build.py
      - name: Set up Python
        if: steps.gate.outputs.run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        if: steps.gate.outputs.run == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pybindgen pytest

      # 2️⃣ Install Go and necessary tooling
      - name: Install system deps (Go)
        if: steps.gate.outputs.run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y golang

      - name: Configure Go and install Go tools
        if: steps.gate.outputs.run == 'true'
        run: |
          echo "GOPATH=$HOME/go" >> "$GITHUB_ENV"
          echo "$HOME/go/bin"    >> "$GITHUB_PATH"
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/go-python/gopy@latest

      # 3️⃣ Checkout the verifier repo with its go.mod (exactly like build.yml)
      - name: Checkout verifier
        if: steps.gate.outputs.run == 'true'
        uses: actions/checkout@v4
        with:
          repository: tinfoilsh/verifier
          ref: v0.1.3
          path: verifier

      # 4️⃣ Now build the Go‑Python bindings (gopy will invoke build.py safely)
      - name: Build Go bindings
        if: steps.gate.outputs.run == 'true'
        run: |
          cd verifier
          gopy build -output=tinfoil_verifier -vm=python3 github.com/tinfoilsh/verifier/client
          cd ..
          mv verifier/tinfoil_verifier tinfoil/tinfoil_verifier
          rm -rf verifier

      # 5️⃣ Install the package and run integration tests
      - name: Install package
        if: steps.gate.outputs.run == 'true'
        run: pip install -e .

      - name: Run integration tests
        if: steps.gate.outputs.run == 'true'
        run: pytest -q -m integration
