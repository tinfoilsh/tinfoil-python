/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/tinfoilsh/verifier/tinfoil_verifier */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "client.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: pkix.RelativeDistinguishedNameSET ---
//
extern long long pkix_RelativeDistinguishedNameSET_CTor();
extern GoInt pkix_RelativeDistinguishedNameSET_len(long long handle);
extern long long pkix_RelativeDistinguishedNameSET_elem(long long handle, GoInt _idx);
extern long long pkix_RelativeDistinguishedNameSET_subslice(long long handle, GoInt _st, GoInt _ed);
extern void pkix_RelativeDistinguishedNameSET_set(long long handle, GoInt _idx, long long _vl);
extern void pkix_RelativeDistinguishedNameSET_append(long long handle, long long _vl);

// --- wrapping slice: asn1.ObjectIdentifier ---
//
extern long long asn1_ObjectIdentifier_CTor();
extern GoInt asn1_ObjectIdentifier_len(long long handle);
extern long long asn1_ObjectIdentifier_elem(long long handle, GoInt _idx);
extern long long asn1_ObjectIdentifier_subslice(long long handle, GoInt _st, GoInt _ed);
extern void asn1_ObjectIdentifier_set(long long handle, GoInt _idx, long long _vl);
extern void asn1_ObjectIdentifier_append(long long handle, long long _vl);

// --- wrapping slice: asn1.RawContent ---
//
extern long long asn1_RawContent_CTor();
extern GoInt asn1_RawContent_len(long long handle);
extern char asn1_RawContent_elem(long long handle, GoInt _idx);
extern long long asn1_RawContent_subslice(long long handle, GoInt _st, GoInt _ed);
extern void asn1_RawContent_set(long long handle, GoInt _idx, char _vl);
extern void asn1_RawContent_append(long long handle, char _vl);

// --- wrapping slice: net.IP ---
//
extern long long net_IP_CTor();
extern GoInt net_IP_len(long long handle);
extern char net_IP_elem(long long handle, GoInt _idx);
extern long long net_IP_subslice(long long handle, GoInt _st, GoInt _ed);
extern void net_IP_set(long long handle, GoInt _idx, char _vl);
extern void net_IP_append(long long handle, char _vl);

// --- wrapping slice: net.IPMask ---
//
extern long long net_IPMask_CTor();
extern GoInt net_IPMask_len(long long handle);
extern char net_IPMask_elem(long long handle, GoInt _idx);
extern long long net_IPMask_subslice(long long handle, GoInt _st, GoInt _ed);
extern void net_IPMask_set(long long handle, GoInt _idx, char _vl);
extern void net_IPMask_append(long long handle, char _vl);

// --- wrapping map: http.Header ---
//
extern long long http_Header_CTor();
extern GoInt http_Header_len(long long handle);
extern long long http_Header_elem(long long handle, char* _ky);
extern char http_Header_contains(long long handle, char* _ky);
extern void http_Header_set(long long handle, char* _ky, long long _vl);
extern void http_Header_delete(long long handle, char* _ky);
extern long long http_Header_keys(long long handle);

// --- wrapping map: textproto.MIMEHeader ---
//
extern long long textproto_MIMEHeader_CTor();
extern GoInt textproto_MIMEHeader_len(long long handle);
extern long long textproto_MIMEHeader_elem(long long handle, char* _ky);
extern char textproto_MIMEHeader_contains(long long handle, char* _ky);
extern void textproto_MIMEHeader_set(long long handle, char* _ky, long long _vl);
extern void textproto_MIMEHeader_delete(long long handle, char* _ky);
extern long long textproto_MIMEHeader_keys(long long handle);

// --- wrapping map: url.Values ---
//
extern long long url_Values_CTor();
extern GoInt url_Values_len(long long handle);
extern long long url_Values_elem(long long handle, char* _ky);
extern char url_Values_contains(long long handle, char* _ky);
extern void url_Values_set(long long handle, char* _ky, long long _vl);
extern void url_Values_delete(long long handle, char* _ky);
extern long long url_Values_keys(long long handle);

// --- wrapping slice: []bool ---
//
extern long long Slice_bool_CTor();
extern GoInt Slice_bool_len(long long handle);
extern char Slice_bool_elem(long long handle, GoInt _idx);
extern long long Slice_bool_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long Slice_byte_CTor();
extern GoInt Slice_byte_len(long long handle);
extern char Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long handle, char _vl);
extern long long Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long handle);

// --- wrapping slice: []error ---
//
extern long long Slice_error_CTor();
extern GoInt Slice_error_len(long long handle);
extern char* Slice_error_elem(long long handle, GoInt _idx);
extern long long Slice_error_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long Slice_float32_CTor();
extern GoInt Slice_float32_len(long long handle);
extern float Slice_float32_elem(long long handle, GoInt _idx);
extern long long Slice_float32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long Slice_float64_CTor();
extern GoInt Slice_float64_len(long long handle);
extern double Slice_float64_elem(long long handle, GoInt _idx);
extern long long Slice_float64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long Slice_int_CTor();
extern GoInt Slice_int_len(long long handle);
extern long long Slice_int_elem(long long handle, GoInt _idx);
extern long long Slice_int_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int_append(long long handle, long long _vl);

// --- wrapping slice: []int16 ---
//
extern long long Slice_int16_CTor();
extern GoInt Slice_int16_len(long long handle);
extern short Slice_int16_elem(long long handle, GoInt _idx);
extern long long Slice_int16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long handle, GoInt _idx, short _vl);
extern void Slice_int16_append(long long handle, short _vl);

// --- wrapping slice: []int32 ---
//
extern long long Slice_int32_CTor();
extern GoInt Slice_int32_len(long long handle);
extern long Slice_int32_elem(long long handle, GoInt _idx);
extern long long Slice_int32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long handle, GoInt _idx, long _vl);
extern void Slice_int32_append(long long handle, long _vl);

// --- wrapping slice: []int64 ---
//
extern long long Slice_int64_CTor();
extern GoInt Slice_int64_len(long long handle);
extern long long Slice_int64_elem(long long handle, GoInt _idx);
extern long long Slice_int64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int64_append(long long handle, long long _vl);

// --- wrapping slice: []int8 ---
//
extern long long Slice_int8_CTor();
extern GoInt Slice_int8_len(long long handle);
extern char Slice_int8_elem(long long handle, GoInt _idx);
extern long long Slice_int8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long Slice_rune_CTor();
extern GoInt Slice_rune_len(long long handle);
extern long Slice_rune_elem(long long handle, GoInt _idx);
extern long long Slice_rune_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long handle, GoInt _idx, long _vl);
extern void Slice_rune_append(long long handle, long _vl);

// --- wrapping slice: []string ---
//
extern long long Slice_string_CTor();
extern GoInt Slice_string_len(long long handle);
extern char* Slice_string_elem(long long handle, GoInt _idx);
extern long long Slice_string_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long Slice_uint_CTor();
extern GoInt Slice_uint_len(long long handle);
extern unsigned long long Slice_uint_elem(long long handle, GoInt _idx);
extern long long Slice_uint_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint16 ---
//
extern long long Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long handle);
extern unsigned short Slice_uint16_elem(long long handle, GoInt _idx);
extern long long Slice_uint16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long handle, GoInt _idx, unsigned short _vl);
extern void Slice_uint16_append(long long handle, unsigned short _vl);

// --- wrapping slice: []uint32 ---
//
extern long long Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long handle);
extern unsigned long Slice_uint32_elem(long long handle, GoInt _idx);
extern long long Slice_uint32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long handle, GoInt _idx, unsigned long _vl);
extern void Slice_uint32_append(long long handle, unsigned long _vl);

// --- wrapping slice: []uint64 ---
//
extern long long Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long handle);
extern unsigned long long Slice_uint64_elem(long long handle, GoInt _idx);
extern long long Slice_uint64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint64_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint8 ---
//
extern long long Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long handle);
extern unsigned char Slice_uint8_elem(long long handle, GoInt _idx);
extern long long Slice_uint8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long handle, unsigned char _vl);

// --- wrapping slice: []*x509.Certificate ---
//
extern long long Slice_Ptr_x509_Certificate_CTor();
extern GoInt Slice_Ptr_x509_Certificate_len(long long handle);
extern long long Slice_Ptr_x509_Certificate_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_x509_Certificate_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_x509_Certificate_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_x509_Certificate_append(long long handle, long long _vl);

// --- wrapping slice: []*multipart.FileHeader ---
//
extern long long Slice_Ptr_multipart_FileHeader_CTor();
extern GoInt Slice_Ptr_multipart_FileHeader_len(long long handle);
extern long long Slice_Ptr_multipart_FileHeader_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_multipart_FileHeader_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_multipart_FileHeader_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_multipart_FileHeader_append(long long handle, long long _vl);

// --- wrapping slice: []*net.IPNet ---
//
extern long long Slice_Ptr_net_IPNet_CTor();
extern GoInt Slice_Ptr_net_IPNet_len(long long handle);
extern long long Slice_Ptr_net_IPNet_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_net_IPNet_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_net_IPNet_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_net_IPNet_append(long long handle, long long _vl);

// --- wrapping slice: []*http.Cookie ---
//
extern long long Slice_Ptr_http_Cookie_CTor();
extern GoInt Slice_Ptr_http_Cookie_len(long long handle);
extern long long Slice_Ptr_http_Cookie_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_http_Cookie_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_http_Cookie_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_http_Cookie_append(long long handle, long long _vl);

// --- wrapping slice: []*url.URL ---
//
extern long long Slice_Ptr_url_URL_CTor();
extern GoInt Slice_Ptr_url_URL_len(long long handle);
extern long long Slice_Ptr_url_URL_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_url_URL_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_url_URL_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_url_URL_append(long long handle, long long _vl);

// --- wrapping slice: [][]*x509.Certificate ---
//
extern long long Slice_Slice_Ptr_x509_Certificate_CTor();
extern GoInt Slice_Slice_Ptr_x509_Certificate_len(long long handle);
extern long long Slice_Slice_Ptr_x509_Certificate_elem(long long handle, GoInt _idx);
extern long long Slice_Slice_Ptr_x509_Certificate_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_Ptr_x509_Certificate_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Slice_Ptr_x509_Certificate_append(long long handle, long long _vl);

// --- wrapping slice: [][]byte ---
//
extern long long Slice_Slice_byte_CTor();
extern GoInt Slice_Slice_byte_len(long long handle);
extern long long Slice_Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_byte_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Slice_byte_append(long long handle, long long _vl);

// --- wrapping slice: []x509.ExtKeyUsage ---
//
extern long long Slice_x509_ExtKeyUsage_CTor();
extern GoInt Slice_x509_ExtKeyUsage_len(long long handle);
extern long long Slice_x509_ExtKeyUsage_elem(long long handle, GoInt _idx);
extern long long Slice_x509_ExtKeyUsage_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_x509_ExtKeyUsage_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_x509_ExtKeyUsage_append(long long handle, long long _vl);

// --- wrapping slice: []x509.OID ---
//
extern long long Slice_x509_OID_CTor();
extern GoInt Slice_x509_OID_len(long long handle);
extern long long Slice_x509_OID_elem(long long handle, GoInt _idx);
extern long long Slice_x509_OID_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_x509_OID_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_x509_OID_append(long long handle, long long _vl);

// --- wrapping slice: []pkix.AttributeTypeAndValue ---
//
extern long long Slice_pkix_AttributeTypeAndValue_CTor();
extern GoInt Slice_pkix_AttributeTypeAndValue_len(long long handle);
extern long long Slice_pkix_AttributeTypeAndValue_elem(long long handle, GoInt _idx);
extern long long Slice_pkix_AttributeTypeAndValue_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_AttributeTypeAndValue_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_pkix_AttributeTypeAndValue_append(long long handle, long long _vl);

// --- wrapping slice: []pkix.Extension ---
//
extern long long Slice_pkix_Extension_CTor();
extern GoInt Slice_pkix_Extension_len(long long handle);
extern long long Slice_pkix_Extension_elem(long long handle, GoInt _idx);
extern long long Slice_pkix_Extension_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_Extension_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_pkix_Extension_append(long long handle, long long _vl);

// --- wrapping slice: []pkix.RevokedCertificate ---
//
extern long long Slice_pkix_RevokedCertificate_CTor();
extern GoInt Slice_pkix_RevokedCertificate_len(long long handle);
extern long long Slice_pkix_RevokedCertificate_elem(long long handle, GoInt _idx);
extern long long Slice_pkix_RevokedCertificate_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_pkix_RevokedCertificate_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_pkix_RevokedCertificate_append(long long handle, long long _vl);

// --- wrapping slice: []asn1.ObjectIdentifier ---
//
extern long long Slice_asn1_ObjectIdentifier_CTor();
extern GoInt Slice_asn1_ObjectIdentifier_len(long long handle);
extern long long Slice_asn1_ObjectIdentifier_elem(long long handle, GoInt _idx);
extern long long Slice_asn1_ObjectIdentifier_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_asn1_ObjectIdentifier_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_asn1_ObjectIdentifier_append(long long handle, long long _vl);

// --- wrapping slice: []big.Word ---
//
extern long long Slice_big_Word_CTor();
extern GoInt Slice_big_Word_len(long long handle);
extern unsigned long long Slice_big_Word_elem(long long handle, GoInt _idx);
extern long long Slice_big_Word_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_big_Word_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_big_Word_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []net.IP ---
//
extern long long Slice_net_IP_CTor();
extern GoInt Slice_net_IP_len(long long handle);
extern long long Slice_net_IP_elem(long long handle, GoInt _idx);
extern long long Slice_net_IP_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_net_IP_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_net_IP_append(long long handle, long long _vl);

// --- wrapping map: map[string][]*multipart.FileHeader ---
//
extern long long Map_string_Slice_Ptr_multipart_FileHeader_CTor();
extern GoInt Map_string_Slice_Ptr_multipart_FileHeader_len(long long handle);
extern long long Map_string_Slice_Ptr_multipart_FileHeader_elem(long long handle, char* _ky);
extern char Map_string_Slice_Ptr_multipart_FileHeader_contains(long long handle, char* _ky);
extern void Map_string_Slice_Ptr_multipart_FileHeader_set(long long handle, char* _ky, long long _vl);
extern void Map_string_Slice_Ptr_multipart_FileHeader_delete(long long handle, char* _ky);
extern long long Map_string_Slice_Ptr_multipart_FileHeader_keys(long long handle);

// --- wrapping map: map[string][]string ---
//
extern long long Map_string_Slice_string_CTor();
extern GoInt Map_string_Slice_string_len(long long handle);
extern long long Map_string_Slice_string_elem(long long handle, char* _ky);
extern char Map_string_Slice_string_contains(long long handle, char* _ky);
extern void Map_string_Slice_string_set(long long handle, char* _ky, long long _vl);
extern void Map_string_Slice_string_delete(long long handle, char* _ky);
extern long long Map_string_Slice_string_keys(long long handle);

// --- wrapping map: map[string]bool ---
//
extern long long Map_string_bool_CTor();
extern GoInt Map_string_bool_len(long long handle);
extern char Map_string_bool_elem(long long handle, char* _ky);
extern char Map_string_bool_contains(long long handle, char* _ky);
extern void Map_string_bool_set(long long handle, char* _ky, char _vl);
extern void Map_string_bool_delete(long long handle, char* _ky);
extern long long Map_string_bool_keys(long long handle);

// --- wrapping map: map[string]string ---
//
extern long long Map_string_string_CTor();
extern GoInt Map_string_string_len(long long handle);
extern char* Map_string_string_elem(long long handle, char* _ky);
extern char Map_string_string_contains(long long handle, char* _ky);
extern void Map_string_string_set(long long handle, char* _ky, char* _vl);
extern void Map_string_string_delete(long long handle, char* _ky);
extern long long Map_string_string_keys(long long handle);

// --- wrapping struct: client.TLSBoundRoundTripper ---
//
extern long long client_TLSBoundRoundTripper_CTor();
extern long long client_TLSBoundRoundTripper_ExpectedCertFP_Get(long long handle);
extern void client_TLSBoundRoundTripper_ExpectedCertFP_Set(long long handle, long long val);
extern long long client_TLSBoundRoundTripper_RoundTrip(long long _handle, long long r);

// --- wrapping struct: client.GroundTruth ---
//
extern long long client_GroundTruth_CTor();
extern long long client_GroundTruth_CertFingerprint_Get(long long handle);
extern void client_GroundTruth_CertFingerprint_Set(long long handle, long long val);
extern char* client_GroundTruth_Digest_Get(long long handle);
extern void client_GroundTruth_Digest_Set(long long handle, char* val);
extern char* client_GroundTruth_Measurement_Get(long long handle);
extern void client_GroundTruth_Measurement_Set(long long handle, char* val);

// --- wrapping struct: client.Response ---
//
extern long long client_Response_CTor();
extern char* client_Response_Status_Get(long long handle);
extern void client_Response_Status_Set(long long handle, char* val);
extern long long client_Response_StatusCode_Get(long long handle);
extern void client_Response_StatusCode_Set(long long handle, long long val);
extern long long client_Response_Headers_Get(long long handle);
extern void client_Response_Headers_Set(long long handle, long long val);
extern long long client_Response_Body_Get(long long handle);
extern void client_Response_Body_Set(long long handle, long long val);

// --- wrapping struct: client.SecureClient ---
//
extern long long client_SecureClient_CTor();
extern long long client_SecureClient_GroundTruth(long long _handle);
extern long long client_SecureClient_Verify(long long _handle);
extern long long client_SecureClient_HTTPClient(long long _handle);
extern long long client_SecureClient_Post(long long _handle, char* url, long long headers, long long body);
extern long long client_SecureClient_Get(long long _handle, char* url, long long headers);
extern long long client_NewSecureClient(char* enclave, char* repo);

#ifdef __cplusplus
}
#endif
